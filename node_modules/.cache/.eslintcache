[{"D:\\BACKUP-GOULART\\AREA-DE-TRABALHO\\PASTAS\\PROGRAMAÇÃO\\ONE-BIT-CODE\\AULAS\\PROJETOS\\TO-DO-LIST\\to-do-list\\src\\index.js":"1","D:\\BACKUP-GOULART\\AREA-DE-TRABALHO\\PASTAS\\PROGRAMAÇÃO\\ONE-BIT-CODE\\AULAS\\PROJETOS\\TO-DO-LIST\\to-do-list\\src\\App.js":"2","D:\\BACKUP-GOULART\\AREA-DE-TRABALHO\\PASTAS\\PROGRAMAÇÃO\\ONE-BIT-CODE\\AULAS\\PROJETOS\\TO-DO-LIST\\to-do-list\\src\\reportWebVitals.js":"3"},{"size":535,"mtime":1677585461781,"results":"4","hashOfConfig":"5"},{"size":4124,"mtime":1677610279203,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1677585462678,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1p8ztcu",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\BACKUP-GOULART\\AREA-DE-TRABALHO\\PASTAS\\PROGRAMAÇÃO\\ONE-BIT-CODE\\AULAS\\PROJETOS\\TO-DO-LIST\\to-do-list\\src\\index.js",[],[],"D:\\BACKUP-GOULART\\AREA-DE-TRABALHO\\PASTAS\\PROGRAMAÇÃO\\ONE-BIT-CODE\\AULAS\\PROJETOS\\TO-DO-LIST\\to-do-list\\src\\App.js",["18"],[],"import './App.css';\nimport { useState, useEffect } from 'react';\nimport { BsTrash, BsBookmarkCheck, BsBookmarkCheckFill } from \"react-icons/bs\"\n\n\nconst API = \"http://localhost:5000\"\n\n\nfunction App() {\n\n  const [title, setTitle] = useState('')\n  const [time, setTime] = useState('')\n  const [todos, setTodos] = useState([])\n  const [loading, setLoading] = useState(false)\n\n\n  useEffect(() => {\n\n    const loadData = async () => {\n\n      setLoading(true)\n\n      const res = await fetch(API + \"/todos\")\n      .then((res) => res.json())\n      .then((data) => data )\n\n      //Primeiro guardamos os valores da API em 'res'\n      //Depois transformamos esses dados em JSON\n      //Depois pegamos essa resposta, transformamos na variavel data e retornamos 'data'\n\n      setLoading(false)\n      //Ja carregados os dados, pode retornar o loading para inativo\n\n      setTodos(res)\n      //'todos' atualizado para os dados adicionados recentemente em 'res'\n\n    }\n\n    loadData()\n    \n\n  }, []) \n  //[] acima responsável para executar o comando quando a pagina carrega \n\n\n\n  const handleSubmit = async (e) => {\n\n    e.preventDefault()\n\n    const todo = {\n\n      id: Math.random(),\n      title,\n      time,\n      done: false\n\n    }\n\n    await fetch(API + \"/todos\", {\n      \n      method: \"POST\",\n      //Inserindo dados\n\n      body: JSON.stringify(todo),\n      //receber dados como string\n\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n\n    })\n\n\n    setTodos((prevState) => [...prevState, todo])\n    //'prevState' = Estado anterior \n    //Função visa adicionar um item ao estado anterior e gerar um novo estado\n\n\n    setTitle('')\n    setTime('')\n\n  }\n\n\n  const handleDelete = async (id) => {\n\n    await fetch(API + \"/todos/\" + id , {\n      \n      method: \"DELETE\",\n\n    })\n\n    setTodos((prevState) => prevState.filter((todo) => todo.id !== id))\n    \n  }\n\n\n  const handleEdit = async (todo) => {\n\n    todo.done = !todo.done\n\n    const data = await fetch(API + \"/todos/\" + todo.id , {\n      \n      method: \"PUT\",\n      body: JSON.stringify(todo),\n      headers: {\n        \"content-type\": \"application/json\"\n      }\n\n    })\n\n    setTodos((prevState) => prevState.map((t) => (t.id === data.id) ? (t = data) : t))\n    //Se o id de 't' for igual ao id do data, vou atualizar todo o objeto pelo o que veio do backEnd\n    //Caso nao, mantem 't' mesmo\n\n\n  }\n\n\n  return (\n\n    <div className='app'>\n\n      <div className='todo-header'>\n        <h1>React To Do List</h1>\n      </div>\n\n      <div className='form-todo'>\n        <h2>Insira sua próxima tarefa:</h2>\n        <form onSubmit={handleSubmit} >\n\n          <div className='form-control'>\n\n            <label htmlFor='title'> Tarefa:</label>\n            <br />\n            <input\n              type='text'\n              name='title'\n              placeholder='Titulo da tarefa'\n              onChange={(e) => setTitle(e.target.value)}\n              value={title || \"\"}\n              required\n            />\n          </div>\n\n          <div className='form-control'>\n            <label htmlFor='time'> Duração:</label>\n            <br />\n            <input\n              type='text'\n              name='time'\n              placeholder='Tempo estimado (horas)'\n              onChange={(e) => setTime(e.target.value)}\n              value={time || \"\"}\n              required\n            />\n          </div>\n\n          <input type='submit' value='Criar Tarefa' />\n\n        </form>\n      </div>\n\n      <div className='list-todo'>\n        <h2>Lista de tarefas: </h2>\n        {todos.length === 0 && <p>Não há tarefas!</p>}\n        {todos.map((todo) => (\n          <div className='todo' key={todo.id}>\n            <h3 className={todo.done ? 'todo-done' : '' } >{todo.title}</h3>\n            <p>Duração: {todo.time} horas</p>\n            <div className='actions'>\n              <span onClick={() => handleEdit(todo)} >{!todo.done ? <BsBookmarkCheck/> : <BsBookmarkCheckFill/>}</span>\n              <BsTrash onClick={() => handleDelete(todo.id)}/>\n              <hr/>\n            </div>\n          </div>\n        ))}\n      </div>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","D:\\BACKUP-GOULART\\AREA-DE-TRABALHO\\PASTAS\\PROGRAMAÇÃO\\ONE-BIT-CODE\\AULAS\\PROJETOS\\TO-DO-LIST\\to-do-list\\src\\reportWebVitals.js",[],[],{"ruleId":"19","severity":1,"message":"20","line":14,"column":10,"nodeType":"21","messageId":"22","endLine":14,"endColumn":17},"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar"]